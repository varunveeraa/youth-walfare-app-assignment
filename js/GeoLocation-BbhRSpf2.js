import{a as _,r as w}from"./mapbox-Dy2hBtBs.js";import{a as d,b as o,f as h,H as C,v as y,E as b,I as M,g,t as c,F as k,D as x,i as S,o as u,d as R,e as T,y as P}from"./vendor-BmZR9K5F.js";import{_ as L}from"./index-csEBr71G.js";import"./firebase-w6XYyoFK.js";var F=w();const p=_(F),I={name:"MapComponent",props:{height:{type:String,default:"500px"},showRouteControls:{type:Boolean,default:!0},initialCenter:{type:Array,default:()=>[-74.006,40.7128]},initialZoom:{type:Number,default:12}},data(){return{map:null,searchQuery:"",startLocation:"",endLocation:"",routeInfo:null,loading:!1,markers:[],routeLayer:null,mapboxToken:"pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw"}},mounted(){this.initializeMap()},beforeUnmount(){this.map&&this.map.remove()},methods:{initializeMap(){p.accessToken=this.mapboxToken,this.map=new p.Map({container:this.$refs.mapContainer,style:"mapbox://styles/mapbox/streets-v12",center:this.initialCenter,zoom:this.initialZoom}),this.map.addControl(new p.NavigationControl),this.map.addControl(new p.GeolocateControl({positionOptions:{enableHighAccuracy:!0},trackUserLocation:!0,showUserHeading:!0})),this.map.on("click",this.onMapClick),this.$emit("map-ready",this.map)},async searchLocation(){if(this.searchQuery.trim()){this.loading=!0;try{const e=await(await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(this.searchQuery)}.json?access_token=${p.accessToken}&limit=1`)).json();if(e.features&&e.features.length>0){const s=e.features[0],[l,n]=s.center;this.map.flyTo({center:[l,n],zoom:14}),this.addMarker([l,n],s.place_name),this.$emit("location-found",{coordinates:[l,n],name:s.place_name})}else this.$emit("search-error","Location not found")}catch(t){console.error("Search error:",t),this.$emit("search-error","Error searching location")}finally{this.loading=!1}}},async calculateRoute(){if(!this.startLocation.trim()||!this.endLocation.trim()){this.$emit("route-error","Please enter both start and end locations");return}this.loading=!0;try{const[t,e]=await Promise.all([this.geocodeLocation(this.startLocation),this.geocodeLocation(this.endLocation)]);if(!t||!e){this.$emit("route-error","Could not find one or both locations");return}const l=await(await fetch(`https://api.mapbox.com/directions/v5/mapbox/driving/${t[0]},${t[1]};${e[0]},${e[1]}?steps=true&geometries=geojson&access_token=${p.accessToken}`)).json();if(l.routes&&l.routes.length>0){const n=l.routes[0];this.displayRoute(n.geometry),this.clearMarkers(),this.addMarker(t,this.startLocation,"green"),this.addMarker(e,this.endLocation,"red");const a=n.geometry.coordinates,r=a.reduce((i,m)=>i.extend(m),new p.LngLatBounds(a[0],a[0]));this.map.fitBounds(r,{padding:50}),this.routeInfo={distance:`${(n.distance/1e3).toFixed(1)} km`,duration:`${Math.round(n.duration/60)} minutes`,steps:n.legs[0].steps.map(i=>({instruction:i.maneuver.instruction,distance:`${(i.distance/1e3).toFixed(1)} km`}))},this.$emit("route-calculated",{route:n,info:this.routeInfo})}}catch(t){console.error("Route calculation error:",t),this.$emit("route-error","Error calculating route")}finally{this.loading=!1}},async geocodeLocation(t){try{const s=await(await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(t)}.json?access_token=${p.accessToken}&limit=1`)).json();return s.features&&s.features.length>0?s.features[0].center:null}catch(e){return console.error("Geocoding error:",e),null}},displayRoute(t){this.routeLayer&&this.map.getLayer("route")&&(this.map.removeLayer("route"),this.map.removeSource("route")),this.map.addSource("route",{type:"geojson",data:{type:"Feature",properties:{},geometry:t}}),this.map.addLayer({id:"route",type:"line",source:"route",layout:{"line-join":"round","line-cap":"round"},paint:{"line-color":"#3887be","line-width":5,"line-opacity":.75}}),this.routeLayer="route"},addMarker(t,e="",s="blue"){const l=new p.Marker({color:s}).setLngLat(t).setPopup(new p.Popup().setHTML(`<h6>${e}</h6>`)).addTo(this.map);return this.markers.push(l),l},clearMarkers(){this.markers.forEach(t=>t.remove()),this.markers=[]},clearRoute(){this.routeLayer&&this.map.getLayer("route")&&(this.map.removeLayer("route"),this.map.removeSource("route")),this.routeLayer=null,this.routeInfo=null,this.clearMarkers(),this.startLocation="",this.endLocation=""},onMapClick(t){const{lng:e,lat:s}=t.lngLat;this.$emit("map-click",{coordinates:[e,s],event:t})}}},B={class:"map-container"},E={class:"search-container"},G={class:"input-field"},$={key:0,class:"route-controls"},j={class:"card"},N={class:"card-content"},A={class:"input-field"},z={class:"input-field"},D={class:"route-buttons"},U={key:1,class:"route-info"},W={class:"card"},V={class:"card-content"},H={key:0,class:"directions"},Y={class:"grey-text"},O={key:2,class:"loading"};function q(t,e,s,l,n,a){return u(),d("div",B,[o("div",{ref:"mapContainer",class:"map",style:C({height:s.height})},null,4),o("div",E,[o("div",G,[y(o("input",{"onUpdate:modelValue":e[0]||(e[0]=r=>n.searchQuery=r),onKeyup:e[1]||(e[1]=M((...r)=>a.searchLocation&&a.searchLocation(...r),["enter"])),type:"text",id:"location-search",placeholder:"Search for wellness spaces...",class:"validate"},null,544),[[b,n.searchQuery]]),e[8]||(e[8]=o("label",{for:"location-search"},"Search Wellness Spaces",-1)),o("button",{onClick:e[2]||(e[2]=(...r)=>a.searchLocation&&a.searchLocation(...r)),class:"btn-small search-btn teal"},[...e[7]||(e[7]=[o("i",{class:"material-icons"},"search",-1)])])])]),s.showRouteControls?(u(),d("div",$,[o("div",j,[o("div",N,[e[11]||(e[11]=o("span",{class:"card-title"},"Route Planning",-1)),o("div",A,[y(o("input",{"onUpdate:modelValue":e[3]||(e[3]=r=>n.startLocation=r),type:"text",id:"start-location",placeholder:"Starting point..."},null,512),[[b,n.startLocation]]),e[9]||(e[9]=o("label",{for:"start-location"},"From",-1))]),o("div",z,[y(o("input",{"onUpdate:modelValue":e[4]||(e[4]=r=>n.endLocation=r),type:"text",id:"end-location",placeholder:"Destination..."},null,512),[[b,n.endLocation]]),e[10]||(e[10]=o("label",{for:"end-location"},"To",-1))]),o("div",D,[o("button",{onClick:e[5]||(e[5]=(...r)=>a.calculateRoute&&a.calculateRoute(...r)),class:"btn blue"},"Get Directions"),o("button",{onClick:e[6]||(e[6]=(...r)=>a.clearRoute&&a.clearRoute(...r)),class:"btn red lighten-1"},"Clear Route")])])])])):h("",!0),n.routeInfo?(u(),d("div",U,[o("div",W,[o("div",V,[e[15]||(e[15]=o("span",{class:"card-title"},"Route Information",-1)),o("p",null,[e[12]||(e[12]=o("strong",null,"Distance:",-1)),g(" "+c(n.routeInfo.distance),1)]),o("p",null,[e[13]||(e[13]=o("strong",null,"Duration:",-1)),g(" "+c(n.routeInfo.duration),1)]),n.routeInfo.steps?(u(),d("div",H,[e[14]||(e[14]=o("h6",null,"Turn-by-turn directions:",-1)),o("ol",null,[(u(!0),d(k,null,x(n.routeInfo.steps,(r,i)=>(u(),d("li",{key:i},[g(c(r.instruction)+" ",1),o("small",Y,"("+c(r.distance)+")",1)]))),128))])])):h("",!0)])])])):h("",!0),n.loading?(u(),d("div",O,[...e[16]||(e[16]=[S('<div class="preloader-wrapper small active" data-v-f79f327f><div class="spinner-layer spinner-blue-only" data-v-f79f327f><div class="circle-clipper left" data-v-f79f327f><div class="circle" data-v-f79f327f></div></div><div class="gap-patch" data-v-f79f327f><div class="circle" data-v-f79f327f></div></div><div class="circle-clipper right" data-v-f79f327f><div class="circle" data-v-f79f327f></div></div></div></div>',1)])])):h("",!0)])}const Q=L(I,[["render",q],["__scopeId","data-v-f79f327f"]]),Z={parks:{name:"Parks & Green Spaces",icon:"park",color:"#4CAF50",searchTerms:["park","garden","green space","nature reserve","botanical garden"],benefits:["Reduces stress and anxiety through nature exposure","Improves mood and emotional well-being","Encourages physical activity and outdoor time","Provides peaceful spaces for reflection and mindfulness","Connects people with nature for mental restoration"],description:"Natural green spaces that provide mental restoration through connection with nature, fresh air, and peaceful environments."},playgrounds:{name:"Playgrounds & Recreation Areas",icon:"child_friendly",color:"#FF9800",searchTerms:["playground","recreation area","play area","children park"],benefits:["Promotes social interaction and community bonding","Encourages physical activity and play","Reduces isolation through family-friendly environments","Supports childhood development and joy","Creates opportunities for intergenerational connections"],description:"Interactive spaces that foster joy, play, and social connections for all ages."},community:{name:"Community Centers",icon:"groups",color:"#2196F3",searchTerms:["community center","community hall","civic center","neighborhood center"],benefits:["Builds social connections and reduces isolation","Provides access to support groups and activities","Offers educational and skill-building opportunities","Creates sense of belonging and community","Facilitates volunteer opportunities and civic engagement"],description:"Gathering spaces that strengthen community bonds and provide social support networks."},fitness:{name:"Gyms & Fitness Centers",icon:"fitness_center",color:"#E91E63",searchTerms:["gym","fitness center","health club","recreation center","sports center"],benefits:["Releases endorphins that improve mood naturally","Reduces symptoms of depression and anxiety","Builds confidence through physical achievement","Provides structured routine and goals","Creates opportunities for social interaction"],description:"Physical activity spaces that boost mental health through exercise and social engagement."},libraries:{name:"Libraries & Learning Spaces",icon:"local_library",color:"#9C27B0",searchTerms:["library","public library","learning center","study space"],benefits:["Provides quiet, peaceful environments for mental clarity","Offers free access to knowledge and personal growth","Creates safe, welcoming community spaces","Supports lifelong learning and cognitive health","Facilitates social programs and community events"],description:"Quiet sanctuaries for learning, reflection, and intellectual growth that support mental wellness."},waterfront:{name:"Waterfront & Beaches",icon:"waves",color:"#00BCD4",searchTerms:["beach","waterfront","lake","river","marina","pier"],benefits:["Provides calming effects through water sounds and views","Offers natural stress relief and relaxation","Encourages mindfulness and present-moment awareness","Supports vitamin D production through sun exposure","Creates opportunities for peaceful contemplation"],description:"Water-adjacent spaces that offer natural tranquility and stress relief through aquatic environments."},trails:{name:"Walking Trails & Paths",icon:"hiking",color:"#795548",searchTerms:["trail","walking path","hiking trail","bike path","greenway"],benefits:["Promotes physical activity and cardiovascular health","Encourages mindful walking and meditation","Provides connection with nature and fresh air","Offers opportunities for social walking groups","Supports routine and goal-setting for mental health"],description:"Pathways that encourage movement, mindfulness, and connection with natural environments."},gardens:{name:"Community Gardens",icon:"eco",color:"#8BC34A",searchTerms:["community garden","urban garden","allotment","garden center"],benefits:["Provides therapeutic benefits through gardening activities","Connects people with nature and growing cycles","Builds community through shared gardening projects","Offers sense of accomplishment and purpose","Supports mindfulness through hands-on activities"],description:"Collaborative growing spaces that nurture both plants and community mental wellness."},arts:{name:"Arts & Cultural Spaces",icon:"palette",color:"#FF5722",searchTerms:["art center","cultural center","museum","gallery","theater"],benefits:["Stimulates creativity and self-expression","Provides cultural enrichment and inspiration","Offers therapeutic benefits through art engagement","Creates opportunities for social and cultural connection","Supports cognitive health through creative activities"],description:"Creative spaces that inspire, educate, and provide therapeutic benefits through arts and culture."},spiritual:{name:"Spiritual & Meditation Spaces",icon:"self_improvement",color:"#673AB7",searchTerms:["meditation center","spiritual center","yoga studio","wellness center"],benefits:["Provides spaces for mindfulness and meditation","Supports spiritual well-being and inner peace","Offers stress reduction through contemplative practices","Creates community around wellness practices","Facilitates personal growth and self-reflection"],description:"Contemplative spaces dedicated to inner peace, mindfulness, and spiritual wellness."}};function J(){return Object.entries(Z).map(([t,e])=>({key:t,...e}))}const K={name:"GeoLocation",components:{MapComponent:Q},data(){return{map:null,markers:[],userLocation:null,currentCity:null,defaultLocation:[144.9631,-37.8136],mapHeight:"100%",wellnessCategories:J(),selectedCategory:null,loading:!1,gettingLocation:!1}},mounted(){console.log("GeoLocation component mounted"),this.getUserLocation()},methods:{async getUserLocation(){if(navigator.geolocation){this.gettingLocation=!0;try{const t=await new Promise((e,s)=>{navigator.geolocation.getCurrentPosition(e,s,{enableHighAccuracy:!0,timeout:1e4,maximumAge:3e5})});this.userLocation=[t.coords.longitude,t.coords.latitude],this.getCityName(this.userLocation),this.map&&this.map.flyTo({center:this.userLocation,zoom:14})}catch(t){console.warn("Geolocation error:",t),this.userLocation=this.defaultLocation,this.currentCity="Melbourne"}finally{this.gettingLocation=!1}}else this.userLocation=this.defaultLocation,this.currentCity="Melbourne"},async getCityName(t){try{const e=await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${t[0]},${t[1]}.json?access_token=${this.getMapboxToken()}&types=place`);if(e.ok){const s=await e.json();s.features&&s.features.length>0&&(this.currentCity=s.features[0].text||"Melbourne")}}catch(e){console.error("Error getting city name:",e),this.currentCity="Melbourne"}},getCityBounds(){return[[144.5,-38.2],[145.5,-37.4]]},selectWellnessCategory(t){console.log("Category selected:",t.name),this.selectedCategory=t,console.log("Selected category set to:",this.selectedCategory.name),this.findNearbyWellnessSpaces()},async findNearbyWellnessSpaces(){if(this.selectedCategory){this.loading=!0,console.log("Searching for:",this.selectedCategory.name);try{const t=this.selectedCategory.searchTerms,e=this.userLocation||this.defaultLocation;let s=[];const l=[{types:"poi",bbox:!0},{types:"poi",bbox:!1},{types:"",bbox:!0},{types:"",bbox:!1}];for(const n of t.slice(0,3))for(const a of l)try{let r=`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(n)}.json?proximity=${e[0]},${e[1]}&access_token=${this.getMapboxToken()}&limit=15`;a.types&&(r+=`&types=${a.types}`),a.bbox&&(r+=`&bbox=${this.getMelbourneBbox()}`),r+="&country=au",console.log(`Searching for term: ${n} (strategy: ${a.types||"general"}, bbox: ${a.bbox})`);const i=await fetch(r);if(i.ok){const m=await i.json();if(console.log(`API returned ${m.features?.length||0} features for ${n}`),m.features&&m.features.length>0){const f=m.features.filter(v=>this.calculateDistance(e[1],e[0],v.center[1],v.center[0])<=50);if(f.length>0){s.push(...f),console.log(`Found ${f.length} results for ${n} with ${a.types||"general"} search`);break}}}}catch(r){console.error(`Search failed for term: ${n}`,r)}console.log("Total results found:",s.length),s.length===0&&(console.log("No API results found, adding sample locations for",this.selectedCategory.name),s=this.getSampleLocations(this.selectedCategory.key)),this.selectedCategory.resultCount=s.length,this.map&&s.length>0?this.addMarkersToMap(s):console.log("No results found for",this.selectedCategory.name)}catch(t){console.error("Search error:",t)}finally{this.loading=!1}}},addMarkersToMap(t){if(console.log("Adding markers to map:",t.length),this.markers&&this.markers.forEach(e=>e.remove()),this.markers=[],t.forEach(e=>{try{console.log("Adding marker for:",e.place_name||e.text);const s=new p.Marker({color:this.selectedCategory.color||"#4CAF50"}).setLngLat(e.center).setPopup(new p.Popup().setHTML(`
              <div style="padding: 10px;">
                <h6 style="margin: 0 0 5px 0; font-size: 14px;">${e.place_name||e.text}</h6>
                <p style="margin: 0; font-size: 12px; color: #666;">${this.selectedCategory.name}</p>
                <small style="color: #999;">Click for directions</small>
              </div>
            `)).addTo(this.map);this.markers.push(s),console.log("Marker added successfully")}catch(s){console.error("Error adding marker:",s)}}),console.log("Total markers added:",this.markers.length),t.length>0)try{const e=t.map(l=>l.center),s=new p.LngLatBounds;e.forEach(l=>s.extend(l)),this.map.fitBounds(s,{padding:50,maxZoom:13}),console.log("Map bounds fitted to show all markers")}catch(e){console.error("Error fitting bounds:",e)}},getMelbourneBbox(){return"144.5,-38.2,145.5,-37.4"},calculateDistance(t,e,s,l){const a=this.deg2rad(s-t),r=this.deg2rad(l-e),i=Math.sin(a/2)*Math.sin(a/2)+Math.cos(this.deg2rad(t))*Math.cos(this.deg2rad(s))*Math.sin(r/2)*Math.sin(r/2);return 6371*(2*Math.atan2(Math.sqrt(i),Math.sqrt(1-i)))},deg2rad(t){return t*(Math.PI/180)},getMapboxToken(){return"your-mapbox-token"},getSampleLocations(t){const e={parks:[{center:[144.9631,-37.8136],place_name:"Royal Botanic Gardens Melbourne",text:"Royal Botanic Gardens"},{center:[144.9841,-37.8076],place_name:"Fitzroy Gardens",text:"Fitzroy Gardens"},{center:[144.9537,-37.808],place_name:"Carlton Gardens",text:"Carlton Gardens"},{center:[144.928,-37.8136],place_name:"Flagstaff Gardens",text:"Flagstaff Gardens"},{center:[145.0372,-37.8301],place_name:"Yarra Park",text:"Yarra Park"}],community:[{center:[144.9631,-37.8136],place_name:"Melbourne Town Hall",text:"Melbourne Town Hall"},{center:[144.9537,-37.808],place_name:"Carlton Community Centre",text:"Carlton Community Centre"},{center:[144.9841,-37.8076],place_name:"East Melbourne Community Centre",text:"East Melbourne Community Centre"},{center:[145.0372,-37.8301],place_name:"Richmond Community Centre",text:"Richmond Community Centre"}],fitness:[{center:[144.9631,-37.8136],place_name:"Melbourne Sports Centre",text:"Melbourne Sports Centre"},{center:[144.9841,-37.8076],place_name:"Fitzroy Pool",text:"Fitzroy Pool"},{center:[144.9537,-37.808],place_name:"Carlton Fitness Centre",text:"Carlton Fitness Centre"},{center:[145.0372,-37.8301],place_name:"Richmond Recreation Centre",text:"Richmond Recreation Centre"}],libraries:[{center:[144.9631,-37.8136],place_name:"State Library Victoria",text:"State Library Victoria"},{center:[144.9841,-37.8076],place_name:"East Melbourne Library",text:"East Melbourne Library"},{center:[144.9537,-37.808],place_name:"Carlton Library",text:"Carlton Library"},{center:[145.0372,-37.8301],place_name:"Richmond Library",text:"Richmond Library"}],waterfront:[{center:[144.9631,-37.8136],place_name:"Yarra River - Southbank",text:"Yarra River - Southbank"},{center:[144.9841,-37.8076],place_name:"Yarra River - Richmond",text:"Yarra River - Richmond"},{center:[144.928,-37.8136],place_name:"Docklands Waterfront",text:"Docklands Waterfront"}]};return e[t]||e.parks},onMapReady(t){this.map=t,console.log("Map ready:",t),console.log("Map center:",t.getCenter()),console.log("Map zoom:",t.getZoom())}}},X={class:"wellness-spaces-page"},ee={class:"fullscreen-layout"},te={class:"categories-sidebar"},oe={class:"sidebar-header"},ne={class:"categories-scroll"},se=["onClick"],re={class:"category-text"},ae={class:"category-name"},ie={key:0,class:"category-count"},le={class:"sidebar-footer"},ce=["disabled"],de={class:"material-icons left"},ue={key:0,class:"location-status"},pe={class:"map-main"},me={class:"map-toolbar"},he={class:"map-title"},ge={key:0},fe={key:1},ye={key:0,class:"map-actions"},be=["disabled"],ve={class:"material-icons left"},Ce={class:"map-content"},ke={key:0,class:"map-overlay"},xe={class:"overlay-content"};function Le(t,e,s,l,n,a){const r=T("MapComponent");return u(),d("div",X,[o("div",ee,[o("div",te,[o("div",oe,[e[2]||(e[2]=o("h4",null,"Find Wellness Spaces",-1)),o("p",null,c(n.currentCity||"Melbourne"),1)]),o("div",ne,[(u(!0),d(k,null,x(n.wellnessCategories,i=>(u(),d("div",{key:i.key,class:P(["category-card",{active:n.selectedCategory?.key===i.key}]),onClick:m=>a.selectWellnessCategory(i)},[o("i",{class:"material-icons category-icon",style:C({color:i.color})},c(i.icon),5),o("div",re,[o("span",ae,c(i.name),1),i.resultCount?(u(),d("small",ie,c(i.resultCount)+" found ",1)):h("",!0)])],10,se))),128))]),o("div",le,[o("button",{onClick:e[0]||(e[0]=(...i)=>a.getUserLocation&&a.getUserLocation(...i)),class:"btn-small teal waves-effect",disabled:n.gettingLocation},[o("i",de,c(n.gettingLocation?"hourglass_empty":"my_location"),1),g(" "+c(n.gettingLocation?"Locating...":"Use My Location"),1)],8,ce),n.userLocation?(u(),d("div",ue,[e[3]||(e[3]=o("i",{class:"material-icons tiny green-text"},"check_circle",-1)),o("span",null,c(n.currentCity||"Melbourne")+" detected",1)])):h("",!0)])]),o("div",pe,[o("div",me,[o("div",he,[n.selectedCategory?(u(),d("span",ge,c(n.selectedCategory.name)+" in "+c(n.currentCity||"Melbourne"),1)):(u(),d("span",fe,"Select a category to explore"))]),n.selectedCategory?(u(),d("div",ye,[o("button",{onClick:e[1]||(e[1]=(...i)=>a.findNearbyWellnessSpaces&&a.findNearbyWellnessSpaces(...i)),class:"btn-small waves-effect",disabled:n.loading},[o("i",ve,c(n.loading?"hourglass_empty":"refresh"),1),g(" "+c(n.loading?"Searching...":"Refresh"),1)],8,be)])):h("",!0)]),o("div",Ce,[R(r,{height:"600px","show-route-controls":!1,"initial-center":n.userLocation||n.defaultLocation,"initial-zoom":11,onMapReady:a.onMapReady},null,8,["initial-center","onMapReady"]),n.selectedCategory?h("",!0):(u(),d("div",ke,[o("div",xe,[e[4]||(e[4]=o("i",{class:"material-icons large"},"explore",-1)),o("h5",null,"Discover "+c(n.currentCity||"Melbourne"),1),e[5]||(e[5]=o("p",null,"Select a wellness category to find mental health-supporting spaces near you",-1)),e[6]||(e[6]=o("small",{style:{color:"#999","margin-top":"10px",display:"block"}}," Map shows Melbourne overview ",-1))])]))])])])])}const Te=L(K,[["render",Le],["__scopeId","data-v-2f3c3904"]]);export{Te as default};
